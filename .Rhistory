plot(AMZN~Date, data=scaledDS1, pch=".", col=1, ylab = "Scaled Price")
lines(AAPL~Date, data=scaledDS1, col=2)
lines(GOOG~Date, data=scaledDS1, col=3)
lines(MSFT~Date, data=scaledDS1, col=4)
legend("topleft", legend = c("AMZN", "AAPL", "GOOG", "MSFT"),
col = c("black", "red", "blue", "green"), lty=1:1, cex=0.9)
mergedStocksNoDate <- (mergedStocks[ , -1])
normalizePrices <- function (vec1) { vec1 / vec1[1] * 100 }
scaledDS <- (data.frame(lapply(mergedStocksNoDate, normalizePrices)))
scaledDS1 <- data.frame(Date = mergedStocks$Date,
AMZN = normalizePrices(mergedStocks$AMZN),
AAPL = normalizePrices(mergedStocks$AAPL),
GOOG = normalizePrices(mergedStocks$GOOG),
MSFT = normalizePrices(mergedStocks$MSFT))
plot(AMZN~Date, data=scaledDS1, pch=".", col=1, ylab = "Scaled Price")
lines(AAPL~Date, data=scaledDS1, col=2)
lines(GOOG~Date, data=scaledDS1, col=3)
lines(MSFT~Date, data=scaledDS1, col=4)
legend("topleft", legend = c("AMZN", "AAPL", "GOOG", "MSFT"),
col = c(1,2,3,4), lty=1:1, cex=0.9)
library(lubridate)
appl <- read.csv(file = "aapl.csv")
amzn <- read.csv(file = "amzn.csv")
goog <- read.csv(file = "goog.csv")
msft <- read.csv(file = "msft.csv")
data.appl <- data.frame(Date = dmy(appl$Date), Close = appl$Close)
date.closedPrice <- function(ds, stock.name) {
temp.ds <- data.frame(Date = dmy(ds$Date), Close = ds$Close)
colnames(temp.ds) <- c("Date", stock.name)
temp.ds[order(temp.ds$Date), ]
}
mergedStocks <- merge(
merge(
date.closedPrice(appl, "AAPL"),
date.closedPrice(amzn, "AMZN"), by="Date"),
merge(
date.closedPrice(msft, "MSFT"),
date.closedPrice(goog, "GOOG"), by="Date")
)
head(mergedStocks)
mergedStocks.clean <- (mergedStocks[ , -1])
View(mergedStocksNoDate)
View(mergedStocks.clean)
cleanStocks <- (mergedStocks[ , -1])
cleanStocks <- (mergedStocks[ , -1])
scaledPrices <- function (vec1) { vec1 / vec1[1] * 100 }
scaledDS <- (data.frame(lapply(cleanStocks, scaledPrices)))
scaledDataFrame <- data.frame(Date = mergedStocks$Date,
AMZN = scaledPrices(mergedStocks$AMZN),
AAPL = scaledPrices(mergedStocks$AAPL),
GOOG = scaledPrices(mergedStocks$GOOG),
MSFT = scaledPrices(mergedStocks$MSFT))
plot(AMZN~Date, data=scaledDataFrame, pch=".", col=1, ylab = "Scaled Price")
lines(AAPL~Date, data=scaledDataFrame, col=2)
lines(GOOG~Date, data=scaledDataFrame, col=3)
lines(MSFT~Date, data=scaledDataFrame, col=4)
legend("topleft", legend = c("AMZN", "AAPL", "GOOG", "MSFT"),
col = c(1,2,3,4), lty=1:1, cex=0.9)
cleanStocks <- (mergedStocks[ , -1])
scaledPrices <- function (vec1) { vec1 / vec1[1] * 100 }
scaledDataFrame <- data.frame(Date = mergedStocks$Date,
AMZN = scaledPrices(mergedStocks$AMZN),
AAPL = scaledPrices(mergedStocks$AAPL),
GOOG = scaledPrices(mergedStocks$GOOG),
MSFT = scaledPrices(mergedStocks$MSFT))
plot(AMZN~Date, data=scaledDataFrame, pch=".", col=1, ylab = "Scaled Price")
lines(AAPL~Date, data=scaledDataFrame, col=2)
lines(GOOG~Date, data=scaledDataFrame, col=3)
lines(MSFT~Date, data=scaledDataFrame, col=4)
legend("topleft", legend = c("AMZN", "AAPL", "GOOG", "MSFT"),
col = c(1,2,3,4), lty=1:1, cex=0.9)
View(scaledDS1)
View(scaledDataFrame)
View(scaledDS)
View(scaledDataFrame)
cleanStocks <- (mergedStocks[ , -1])
scaledPrices <- function (vec1) { vec1 / vec1[1] * 100 }
scaledDS <- (data.frame(lapply(cleanStocks, scaledPrices)))
scaledData <- data.frame(Date = mergedStocks$Date,
AMZN = scaledPrices(mergedStocks$AMZN),
AAPL = scaledPrices(mergedStocks$AAPL),
GOOG = scaledPrices(mergedStocks$GOOG),
MSFT = scaledPrices(mergedStocks$MSFT))
plot(AMZN~Date, data=scaledData, pch=".", col=1, ylab = "Scaled Price")
lines(AAPL~Date, data=scaledData, col=2)
lines(GOOG~Date, data=scaledData, col=3)
lines(MSFT~Date, data=scaledData, col=4)
legend("topleft", legend = c("AMZN", "AAPL", "GOOG", "MSFT"),
col = c(1,2,3,4), lty=1:1, cex=0.9)
cleanStocks <- (mergedStocks[ , -1])
scaledPrices <- function (vec1) { vec1 / vec1[1] * 100 }
scaledData <- data.frame(Date = mergedStocks$Date,
AMZN = scaledPrices(mergedStocks$AMZN),
AAPL = scaledPrices(mergedStocks$AAPL),
GOOG = scaledPrices(mergedStocks$GOOG),
MSFT = scaledPrices(mergedStocks$MSFT))
plot(AMZN~Date, data=scaledData, pch=".", col=1, ylab = "Scaled Price")
lines(AAPL~Date, data=scaledData, col=2)
lines(GOOG~Date, data=scaledData, col=3)
lines(MSFT~Date, data=scaledData, col=4)
legend("topleft", legend = c("AMZN", "AAPL", "GOOG", "MSFT"),
col = c(1,2,3,4), lty=1:1, cex=0.9)
boxplot(GOOG ~ year(Date), data=mergedStocks, main = "Google Stock Price Data",
xlab = "Year", ylab = "price(dollar)")
boxplot(GOOG ~ year(Date), data=mergedStocks, main = "Google Stock Price Data",
xlab = "Year", ylab = "Price")
merge(
merge(
aggregate(GOOG ~ year(Date), data=mergedStocks, FUN=mean),
aggregate(AMZN ~ year(Date), data=mergedStocks, FUN=mean), by = "year(Date)"
),
merge(
aggregate(AAPL ~ year(Date), data=mergedStocks, FUN=mean),
aggregate(MSFT ~ year(Date), data=mergedStocks, FUN=mean), by = "year(Date)"
)
)
merged.mean.data <- merge(
merge(
aggregate(GOOG ~ year(Date), data=mergedStocks, FUN=mean),
aggregate(AMZN ~ year(Date), data=mergedStocks, FUN=mean), by = "year(Date)"
),
merge(
aggregate(AAPL ~ year(Date), data=mergedStocks, FUN=mean),
aggregate(MSFT ~ year(Date), data=mergedStocks, FUN=mean), by = "year(Date)"
)
)
head(merged.mean.data)
library(ggcorrplot)
toReturns <- function (vec1) diff(log(vec1))
mergedReturns <- data.frame(lapply(mergedStocks[,-1], toReturns))
ggcorrplot(cor(mergedReturns), method = "circle")
library(ggcorrplot)
toReturns <- function (vec1) {
diff(log(vec1))
}
mergedReturns <- data.frame(lapply(mergedStocks[,-1], toReturns))
ggcorrplot(cor(mergedReturns), method = "circle")
library(lubridate)
appl <- read.csv(file = "aapl.csv")
amzn <- read.csv(file = "amzn.csv")
goog <- read.csv(file = "goog.csv")
msft <- read.csv(file = "msft.csv")
data.appl <- data.frame(Date = dmy(appl$Date), Close = appl$Close)
dateClosedPrice <- function(stock.data, stock.name) {
filter.data <- data.frame(Date = dmy(stock.data$Date), Close = stock.data$Close)
colnames(filter.data) <- c("Date", stock.name)
filter.data[order(filter.data$Date), ]
}
mergedStocks <- merge(
merge(
dateClosedPrice(appl, "AAPL"),
dateClosedPrice(amzn, "AMZN"), by="Date"),
merge(
dateClosedPrice(msft, "MSFT"),
dateClosedPrice(goog, "GOOG"), by="Date")
)
head(mergedStocks)
a <- 1:3
Q1 <- c(a,a)
print(Q1)
q4 <- Inf - Inf
Q1[-1]
Q1[-2]
Q1[-1,-6]
Q1[-1,-6]
Q1[c(-1,-6)]
Q1[TRUE]
Q1[FALSE]
Q1[c(TRUE,FALSE)]
Q1[c(-1,-6)]
Q1[c(TRUE,FALSE)]
c(TRUE,FALSE)
Q1[0]
Q4 <- c(1,2,3)
Q4[c(TRUE,FALSE)]
Q4 <- c(1,2,3,4)
Q4[c(TRUE,FALSE)]
Q4 <- c(1,2,3,4,5)
Q4[c(TRUE,FALSE)]
Q4 <- c(1:100)
Q4[c(TRUE,FALSE)]
as.matrix(rbind(c(0,1)))
as.matrix(rbind(c(0,1),c(1,1)))
as.matrix(rbind(c(0,1),c(1,1)))
as.matrix(rbind(c(0,1),c(1,1)))
as.matrix(rbind(c(1,1)))
c(0,1),
as.matrix(rbind(c(0,1),c(1,1)))
M1 <- as.matrix(rbind(c(0,1),c(1,1)))
M2 <- as.matrix(rbind(c(2,3), c(2,4)))
M1 %*% M2
M1 %*% M2
?%*%
?'%*%'
M1 <- as.matrix(rbind(c(1,1),c(1,1)))
M2 <- as.matrix(rbind(c(2,2), c(2,2)))
M1 %*% M2
M2 <- as.matrix(rbind(c(3,3), c(2,2)))
M1 %*% M2
M2 <- as.matrix(rbind(c(3,3), c(3,3)))
M1 %*% M2
M2 <- as.matrix(rbind(c(2,3), c(3,3)))
M1 %*% M2
M2 <- as.matrix(rbind(c(2,3), c(2,3)))
M1 %*% M2
M2 <- as.matrix(rbind(c(2,3), c(1,3)))
M1 %*% M2
M2 <- as.matrix(rbind(c(1,3), c(1,3)))
M1 %*% M2
M1 <- as.matrix(rbind(c(1,1),c(2,1)))
M2 <- as.matrix(rbind(c(1,3), c(2,3)))
M1 %*% M2
as.matrix(rbind(c(0,1),c(1,1)))
as.matrix(rbind(c(2,3), c(2,4)))
M1 <- as.matrix(rbind(c(0,1),c(1,1)))
M2 <- as.matrix(rbind(c(2,3), c(2,4)))
M1 %*% M2
matrix(2:3)
matrix(2:4)
matrix(2:4, ncol = 2)
matrix(2:4, ncol = 3)
matrix(2:4, ncol = 1)
matrix(2:4, ncol = 3)
matrix(2:8, ncol = 3)
matrix(2:9, ncol = 3)
matrix(2:10, ncol = 3)
matrix(2:10, nrow = 3)
matrix(2:10, ncol = 3, byrow = TRUE)
matrix(2:10, ncol = 3, byrow = FALSE)
a <- matrix(2:10, ncol = 3, byrow = FALSE)
a[1,1]
a[1,2]
a[3,2]
a[2:3]
a[2:8]
a[2:4,5,8]
a[2:4,5:8]
a[2:4,5:7]
a[2:4,5:6]
a[2:3,5:6]
a[2:3,4:5]
a[1:3,4:5]
a[1:3,3:5]
a <- matrix(2:10, ncol = 3, byrow = FALSE)
View(a)
a[1:2,3:4]
a[1:2,2:3]
View(a)
a[1:3,2:3]
a[1:3,1:3]
a[1:3,1:2]
sin(2)
sin(3.14)
sin(1)
sin(3.14/2)
sin(1:100)
sin(1:3.14)
?integrate
?abline
cbind(1:3,4:6,7:9,10:12)
rbind(1:3,4:6,7:9,10:12)
2**3
2**4
ls()
(1:6)>5
which(1:6)>5
(1:6)>5
# For the weatherAUS dataset.
library(rattle)
#Create Data
x1 = rnorm(100)
x2 = rnorm(100, mean=2)
par(mfrow=c(2,1))
#Make the plot
par(mar=c(0,5,3,3))
plot(density(x1) , main="" , xlab="", ylim=c(0,1) , xaxt="n", las=1 , col="slateblue1" , lwd=4 )
par(mar=c(5,5,0,3))
plot(density(x2) , main="" , xlab="Value of my variable", ylim=c(1,0) , las=1 , col="tomato3" , lwd=4)
plot(density(x1) , main="" , xlab="", ylim=c(0,1) , xaxt="n", las=1 , col="slateblue1" , lwd=4 )
par(mar=c(5,5,0,3))
plot(density(x2) , main="" , xlab="Value of my variable", ylim=c(1,0) , las=1 , col="tomato3" , lwd=4)
# Library
library(fmsb)
# Library
install.packages(fmsb)
# Library
install.packages(fmsb)
library(fmsb)
# Create data: note in High school for Jonathan:
data=as.data.frame(matrix( sample( 2:20 , 10 , replace=T) , ncol=10))
colnames(data)=c("math" , "english" , "biology" , "music" , "R-coding", "data-viz" , "french" , "physic", "statistic", "sport" )
# To use the fmsb package, I have to add 2 lines to the dataframe: the max and min of each topic to show on the plot!
data=rbind(rep(20,10) , rep(0,10) , data)
# The default radar chart proposed by the library:
radarchart(data)
# Custom the radarChart !
radarchart( data  , axistype=1 ,
#custom polygon
pcol=rgb(0.2,0.5,0.5,0.9) , pfcol=rgb(0.2,0.5,0.5,0.5) , plwd=4 ,
#custom the grid
cglcol="grey", cglty=1, axislabcol="grey", caxislabels=seq(0,20,5), cglwd=0.8,
#custom labels
vlcex=0.8
)
search(fmsb)
# Library
install.packages("fmsb")
library(fmsb)
# Create data: note in High school for Jonathan:
data=as.data.frame(matrix( sample( 2:20 , 10 , replace=T) , ncol=10))
colnames(data)=c("math" , "english" , "biology" , "music" , "R-coding", "data-viz" , "french" , "physic", "statistic", "sport" )
# To use the fmsb package, I have to add 2 lines to the dataframe: the max and min of each topic to show on the plot!
data=rbind(rep(20,10) , rep(0,10) , data)
# The default radar chart proposed by the library:
radarchart(data)
# Custom the radarChart !
radarchart( data  , axistype=1 ,
#custom polygon
pcol=rgb(0.2,0.5,0.5,0.9) , pfcol=rgb(0.2,0.5,0.5,0.5) , plwd=4 ,
#custom the grid
cglcol="grey", cglty=1, axislabcol="grey", caxislabels=seq(0,20,5), cglwd=0.8,
#custom labels
vlcex=0.8
)
library("lattice")
## Example data
x <- seq(1,10, length.out=20)
y <- seq(1,10, length.out=20)
data <- expand.grid(X=x, Y=y)
data$Z <- runif(400, 0, 5)
## Try it out
par(mar=c(3,4,2,2))
levelplot(Z ~ X*Y, data=data  , xlab="X" , col.regions = heat.colors(100)[length(heat.colors(100)):1]   , main="")
x0 <- seq(1,10, length.out=50)
y0 <- seq(1,10, length.out=50)
data0 <- expand.grid(X=xo, Y=y0)
data0 <- expand.grid(X=x0, Y=y0)
data$Z <- runif(400, 0, 5)
par(mar=c(3,4,2,2))
levelplot(Z ~ X*Y, data=data0  , xlab="X" , col.regions = heat.colors(10)[length(heat.colors(10)):1]   , main="")
data0$Z <- runif(400, 0, 5)
data0 <- expand.grid(X=x0, Y=y0)
data0$Z <- runif(400, 0, 5)
data0$Z <- runif(2500, 0, 5)
par(mar=c(3,4,2,2))
levelplot(Z ~ X*Y, data=data0  , xlab="X" , col.regions = heat.colors(10)[length(heat.colors(10)):1]   , main="")
levelplot(Z ~ X*Y, data=data0  , xlab="X" , col.regions = heat.colors(300)[length(heat.colors(300)):100]   , main="")
levelplot(Z ~ X*Y, data=data0  , xlab="X" , col.regions = heat.colors(1000)[length(heat.colors(1000)):100]   , main="")
data0$Z <- runif(2500, 0, 10)
par(mar=c(3,4,2,2))
levelplot(Z ~ X*Y, data=data0  , xlab="X" , col.regions = heat.colors(300)[length(heat.colors(300)):100]   , main="")
data0$Z <- runif(2500, 0, 50)
par(mar=c(3,4,2,2))
levelplot(Z ~ X*Y, data=data0  , xlab="X" , col.regions = heat.colors(300)[length(heat.colors(300)):100]   , main="")
knitr::opts_chunk$set(echo = TRUE)
#setwd("/Users/Lei/Documents/INFO 201/a6-collaboration-leizzhang")
library("ggplot2")
library("dplyr")
library("knitr")
library("httr")
survey.data <- read.csv('./data/intro-survey.csv', stringsAsFactors = FALSE)
ggplot(data = survey.data) +
geom_bar(mapping = aes(x = r_exp, fill = info_interest), position = "dodge")+
labs(title = "students' interest in applying to Informatics major grouped by proficiency in R",  # plot title
x = "level of proficiency in R",  # x-axis label
y = "counter of student",  # y-axis label
color = "")
ggplot(data = survey.data) +
geom_bar(mapping = aes(x = r_exp, fill = info_interest), position = "dodge")+
labs(title = "students' interest in applying to Informatics major grouped by proficiency in R",  # plot title
x = "level of proficiency in R",  # x-axis label
y = "counter of student",  # y-axis label
color = "")
ggplot(data = survey.data) +
geom_bar(mapping = aes(x = r_exp, fill = os), position = "dodge")+
labs(title = "operating system used grouped by proficiency in R",  # plot title
x = "level of proficiency in R",  # x-axis label
y = "counter of student",  # y-axis label
color = "")
ggplot(data = survey.data) +
geom_bar(mapping = aes(x = r_exp, fill = os), position = "dodge")+
labs(title = "operating system used grouped by proficiency in R",  # plot title
x = "level of proficiency in R",  # x-axis label
y = "counter of student",  # y-axis label
color = "")
ggplot(data = survey.data) +
geom_bar(mapping = aes(x = info_interest, fill = os), position = "dodge")+
labs(title = "operating system used grouped by students' interest in applying to Informatics major",  # plot title
x = "level of proficiency in R",  # x-axis label
y = "counter of student",  # y-axis label
color = "")
adjust.coffee <- survey.data %>%
filter(coffee_cups <= 10)
adjust.wa <- survey.data %>%
filter(washington_born != "")
adjust.coffee.wa <- survey.data %>%
filter(coffee_cups <= 10) %>%
filter(washington_born != "")
ggplot(data = adjust.wa) +
geom_bar(mapping = aes(x = seahawks_fan, fill = washington_born), position = "dodge")
ggplot(data = adjust.coffee.wa) +
geom_bar(mapping = aes(x = coffee_cups, fill = washington_born),position = "dodge")
ggplot(my.data) +
geom_point(mapping = aes(x = programming_exp, y = cli_exp))
my.data <- data.frame(cli_exp,vcs_exp,md_exp,r_exp, stringsAsFactors = FALSE)
# Part 2
# This function takes a column x and a level number, returns the number of people in that level
people.calculate <- function(x, n) {
return(nrow(survey.data[x == n, ]))
}
cli00 <- people.calculate(survey.data$cli_exp, 0)
cli11 <- people.calculate(survey.data$cli_exp, 1)
cli22 <- people.calculate(survey.data$cli_exp, 2)
cli33 <- people.calculate(survey.data$cli_exp, 3)
vcs00 <- people.calculate(survey.data$vcs_exp, 0)
vcs11 <- people.calculate(survey.data$vcs_exp, 1)
vcs22 <- people.calculate(survey.data$vcs_exp, 2)
vcs33 <- people.calculate(survey.data$vcs_exp, 3)
md00 <- people.calculate(survey.data$md_exp, 0)
md11 <- people.calculate(survey.data$md_exp, 1)
md22 <- people.calculate(survey.data$md_exp, 2)
md33 <- people.calculate(survey.data$md_exp, 3)
r00 <- people.calculate(survey.data$r_exp , 0)
r11 <- people.calculate(survey.data$r_exp , 1)
r22 <- people.calculate(survey.data$r_exp , 2)
r33 <- people.calculate(survey.data$r_exp , 3)
name <- c("cli_exp", "vcs_exp", "md_exp", "r_exp", "web_exp")
cli_exp <- c(cli00,cli11,cli22,cli33)
vcs_exp <- c(vcs00,vcs11,vcs22,vcs33)
md_exp <- c(md00,md11,md22,md33)
r_exp <- c(r00,r11,r22,r33)
my.data <- data.frame(cli_exp,vcs_exp,md_exp,r_exp, stringsAsFactors = FALSE)
rownames(my.data) <- c("Never used", "Used a few times", "Intermediate user", "Expert user")
ggplot(my.data) +
geom_point(mapping = aes(x = programming_exp, y = cli_exp))
ggplot(my.data) +
geom_point(mapping = aes(x = programming_exp, y = cli_exp))
# Part 2
# This function takes a column x and a level number, returns the number of people in that level
people.calculate <- function(x, n) {
return(nrow(survey.data[x == n, ]))
}
cli00 <- people.calculate(survey.data$cli_exp, 0)
cli11 <- people.calculate(survey.data$cli_exp, 1)
cli22 <- people.calculate(survey.data$cli_exp, 2)
cli33 <- people.calculate(survey.data$cli_exp, 3)
vcs00 <- people.calculate(survey.data$vcs_exp, 0)
vcs11 <- people.calculate(survey.data$vcs_exp, 1)
vcs22 <- people.calculate(survey.data$vcs_exp, 2)
vcs33 <- people.calculate(survey.data$vcs_exp, 3)
md00 <- people.calculate(survey.data$md_exp, 0)
md11 <- people.calculate(survey.data$md_exp, 1)
md22 <- people.calculate(survey.data$md_exp, 2)
md33 <- people.calculate(survey.data$md_exp, 3)
r00 <- people.calculate(survey.data$r_exp , 0)
r11 <- people.calculate(survey.data$r_exp , 1)
r22 <- people.calculate(survey.data$r_exp , 2)
r33 <- people.calculate(survey.data$r_exp , 3)
name <- c("cli_exp", "vcs_exp", "md_exp", "r_exp", "web_exp")
cli_exp <- c(cli00,cli11,cli22,cli33)
vcs_exp <- c(vcs00,vcs11,vcs22,vcs33)
md_exp <- c(md00,md11,md22,md33)
r_exp <- c(r00,r11,r22,r33)
my.data <- data.frame(cli_exp,vcs_exp,md_exp,r_exp, stringsAsFactors = FALSE)
rownames(my.data) <- c("Never used", "Used a few times", "Intermediate user", "Expert user")
kable(my.data)
setwd("~/Desktop/info201/final-project")
data <- read.csv("MERGED2015_16_PP.csv")
data <- read.csv("MERGED2015_16_PP.csv")
View(data)
data <- read.csv("Most-Recent-Cohorts-Scorecard-Elements.csv")
View(data)
data11 <- read.csv("Most-Recent-Cohorts-Treasury-Elements.csv")
View(data11)
shiny::runApp()
setwd("~/Desktop/info201/final-project")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
earning <- select(data,"MD_EARN_WNE_P10", "RPY_3YR_RT_SUPP") %>% filter("INSTNM")
runApp()
runApp()
runApp()
earning <- select(data, "INSTNM","MD_EARN_WNE_P10", "RPY_3YR_RT_SUPP") %>% filter(input$college)
earning <- select(data, "INSTNM","MD_EARN_WNE_P10", "RPY_3YR_RT_SUPP") %>% filter("Alabama State University")
earning <- select(data, "INSTNM","MD_EARN_WNE_P10", "RPY_3YR_RT_SUPP") %>%
filter(Alabama State University)
earning <- select(data, "INSTNM","MD_EARN_WNE_P10", "RPY_3YR_RT_SUPP") %>%
filter(INSTNM == Alabama State University)
earning <- select(data, INSTNM,MD_EARN_WNE_P10, RPY_3YR_RT_SUPP) %>%
filter(INSTNM == "Alabama State University")
View(earning)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(df)
View(earning)
runApp()
runApp()
runApp()
runApp()
